// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// count_inversions
unsigned long long count_inversions(std::vector<double>& x);
RcppExport SEXP _rankr_count_inversions(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(count_inversions(x));
    return rcpp_result_gen;
END_RCPP
}
// tau_a
double tau_a(std::vector<double> x, std::vector<double> y);
RcppExport SEXP _rankr_tau_a(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(tau_a(x, y));
    return rcpp_result_gen;
END_RCPP
}
// tau_b
double tau_b(std::vector<double> x, std::vector<double> y);
RcppExport SEXP _rankr_tau_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(tau_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// tau_c
double tau_c(std::vector<double> x, std::vector<double> y);
RcppExport SEXP _rankr_tau_c(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(tau_c(x, y));
    return rcpp_result_gen;
END_RCPP
}
// tau_d
double tau_d(std::vector<double> x, std::vector<double> y);
RcppExport SEXP _rankr_tau_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(tau_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// somers_d
double somers_d(std::vector<double> x, std::vector<double> y);
RcppExport SEXP _rankr_somers_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(somers_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// gk_gamma
double gk_gamma(std::vector<double> x, std::vector<double> y);
RcppExport SEXP _rankr_gk_gamma(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(gk_gamma(x, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rankr_count_inversions", (DL_FUNC) &_rankr_count_inversions, 1},
    {"_rankr_tau_a", (DL_FUNC) &_rankr_tau_a, 2},
    {"_rankr_tau_b", (DL_FUNC) &_rankr_tau_b, 2},
    {"_rankr_tau_c", (DL_FUNC) &_rankr_tau_c, 2},
    {"_rankr_tau_d", (DL_FUNC) &_rankr_tau_d, 2},
    {"_rankr_somers_d", (DL_FUNC) &_rankr_somers_d, 2},
    {"_rankr_gk_gamma", (DL_FUNC) &_rankr_gk_gamma, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rankr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
