w1[f(i, (i + 1):n)] = 1
# Second modifictation.
w2[f(i, (i + 1):n)] = 0
if(sum(u * w1) < sum(u * w2)) {
v = w1
z[i] = 1
} else {
v = w2
z[i] = 0
}
}
rank(c(0,cumsum(z)), ties.method = "min")
f = function(i, j) {
s = 0.5 * (-(i - 2)^2 + 2 * (i - 2) * (n - 1) - (i - 2) + 2 * (n - 1))
s + (j - i)
}
n = length(x)
ys = combn(y, 2)
u = -(ys[1, ] < ys[2, ]) + (ys[1, ] == ys[2, ])
z = rep(0, n - 1)
v = -u
indices = 1:(n - 1)
for (i in indices) {
w1 = v
w2 = v
w1[f(i, (i + 1):n)] = 1
# Second modifictation.
w2[f(i, (i + 1):n)] = 0
if(sum(u * w1) < sum(u * w2)) {
v = w1
z[i] = 1
} else {
v = w2
z[i] = 0
}
}
rank(c(0,cumsum(z)), ties.method = "min")
f = function(i, j) {
s = 0.5 * (-(i - 2)^2 + 2 * (i - 2) * (n - 1) - (i - 2) + 2 * (n - 1))
s + (j - i)
}
n = length(x)
ys = combn(y, 2)
u = -(ys[1, ] < ys[2, ]) + (ys[1, ] == ys[2, ])
z = rep(0, n - 1)
v = -u
indices = 1:(n - 1)
v
v
u
minimizer(x, y)
n = length(x)
m = n * (n - 1) / 2
tied_data = ties(x)
g = function(i) {
s = 0.5 * (-(i - 2)^2 + 2 * (i - 2) * (n - 1) - (i - 2) + 2 * (n - 1))
s + 1
}
# Calculates the index of w_ij
f = function(i, j) {
s = 0.5 * (-(i - 2)^2 + 2 * (i - 2) * (n - 1) - (i - 2) + 2 * (n - 1))
s + (j - i)
}
get_constraints = function(n) {
mat = matrix(rep(0, m * m * 2), ncol = m)
combns = combn(1:n, 2)
'%!in%' <- function(x,y)!('%in%'(x,y))
for (index in seq.int(1, m)) {
if (index %!in% zeros) {
i = combns[, index][1]
j = combns[, index][2]
indices = g(seq.int(from = i, to = j - 1, by = 1))
row_one = rep(0, m)
row_one[indices] = -1
row_one[f(i, j)] = 1
row_two = rep(0, m)
row_two[indices] = 1/(j - i)
row_two[f(i, j)] = -1
mat[index, ] = row_one
mat[m + index, ] = row_two
}
}
mat
}
ties_constraints = function(tied_data) {
mat = matrix(0, nrow = length(tied_data), ncol = m)
indices = g(tied_data)
row = 1
for (i in indices) {
mat[row, i] = 1
row = row + 1
}
mat
}
n = length(x)
m = n * (n - 1) / 2
zeros = sapply(seq(n - 1), g)
ys = combn(y, 2)
u = (ys[1, ] < ys[2, ]) * -1 + (ys[1, ] == ys[2, ]) * 1
obj = -(ys[1, ] < ys[2, ]) + (ys[1, ] == ys[2, ])
mat = rbind(get_constraints(n), ties_constraints(tied_data))
dir = c(rep("<=", 2 * m), rep("==", length(tied_data)))
rhs = rep(0, 2 * m + length(tied_data))
types = rep("B", 2 * m)
sol = Rglpk::Rglpk_solve_LP(obj, mat, dir, rhs, types = types)
sol$solution[zeros]
rank(c(0,cumsum(sol$solution[zeros])), ties.method = "min")
n = length(x)
ys = combn(y, 2)
u = -(ys[1, ] < ys[2, ]) + (ys[1, ] == ys[2, ])
z = rep(0, n - 1)
v = -u
u
n = length(x)
ys = combn(y, 2)
u = -(ys[1, ] < ys[2, ]) + (ys[1, ] == ys[2, ])
z = rep(0, n - 1)
v = u
sum(u ,v)
sum(u,v)
u
v
i = 1
w1 = v
w2 = v
w1[f(i, (i + 1):n)] = 1
# Second modifictation.
w2[f(i, (i + 1):n)] = 0
if(sum(u * w1) < sum(u * w2)) {
v = w1
z[i] = 1
} else {
v = w2
z[i] = 0
}
z = rep(0, n - 1)
v = (ys[1, ] < ys[2, ])
v
z = rep(0, n - 1)
v = 1 * (ys[1, ] < ys[2, ])
v
mtcars
mtcars$carb
y1 = mtcars$carb
y2 = mtcars$gear
y3 = mtcars$cyl
y1
plot(y1)
plot(y2)
plot(y3)
sort(y1)
plot(sort(y1))
plot(sort(y2))
plot(sort(y3))
y1 = mtcars$carb
y2 = mtcars$gear
y3 = mtcars$cyl
plot(y2[order(y1)])
plot(y1[order(y2)])
y1 = mtcars$carb
y2 = mtcars$gear
y3 = mtcars$cyl
plot(y2[order(y1)])
plot(y3[order(y1)])
cor(y1, y2)
cor(y2, y3)
cor(mtcars)
psychTools::bfi
y1 = psychTools::bfi$A1
y2 = psychTools::bfi$A2
y3 = psychTools::bfi$A3
y4 = psychTools::bfi$A4
y5 = psychTools::bfi$A5
plot(y1)
cor(y1)
cor(y1, y2)
y1 = psychTools::bfi$A1
y2 = psychTools::bfi$A2
y3 = psychTools::bfi$A3
y4 = psychTools::bfi$A4
y5 = psychTools::bfi$A5
y = cbind(y1, y2, y3, y4, y5)
cor(y)
?cor
y1 = psychTools::bfi$A1
y2 = psychTools::bfi$A2
y3 = psychTools::bfi$A3
y4 = psychTools::bfi$A4
y5 = psychTools::bfi$A5
y = cbind(y1, y2, y3, y4, y5, na.rm = TRUE)
y
y1 = psychTools::bfi$A1
y2 = psychTools::bfi$A2
y3 = psychTools::bfi$A3
y4 = psychTools::bfi$A4
y5 = psychTools::bfi$A5
y = cbind(y1, y2, y3, y4, y5)
cor(y, na.rm = TRUE)
y1 = psychTools::bfi$A1
y2 = psychTools::bfi$A2
y3 = psychTools::bfi$A3
y4 = psychTools::bfi$A4
y5 = psychTools::bfi$A5
y = cbind(y1, y2, y3, y4, y5)
cor(y, use = "complete.obs")
y1 = psychTools::bfi$A1
y2 = psychTools::bfi$A2
y3 = psychTools::bfi$A3
y4 = psychTools::bfi$A4
y5 = psychTools::bfi$A5
y = cbind(-y1, y2, y3, y4, y5)
cor(y, use = "complete.obs")
y1 = -psychTools::bfi$A1
y2 = psychTools::bfi$A2
y3 = psychTools::bfi$A3
y4 = psychTools::bfi$A4
y5 = psychTools::bfi$A5
y = cbind(-y1, y2, y3, y4, y5)
cor(y, use = "complete.obs")
y1 = -psychTools::bfi$A1
y2 = psychTools::bfi$A2
y3 = psychTools::bfi$A3
y4 = psychTools::bfi$A4
y5 = psychTools::bfi$A5
y = cbind(-y1, y2, y3, y4, y5)
cor(y, use = "complete.obs")
plot(y1, y2)
y = cbind(-y1, y2, y3, y4, y5)
cor(y, use = "complete.obs")
y1 = -psychTools::bfi$A1
y2 = psychTools::bfi$A2
y3 = psychTools::bfi$A3
y4 = psychTools::bfi$A4
y5 = psychTools::bfi$A5
y = cbind(y1, y2, y3, y4, y5)
cor(y, use = "complete.obs")
k = 7
z1 = y1[1:k]
z2 = y2[1:k]
score = -Inf
x = 1:k
permutations = arrangements::permutations(x = 1:6, k = k, replace = TRUE)
permutations
k = 7
z1 = y1[1:k]
z2 = y2[1:k]
score = -Inf
x = 1:k
permutations = arrangements::permutations(x = 1:6, k = k, replace = TRUE)
for (x_new in permutations) {
new_score = (rankr::tau_d(x_new, z1) + rankr::tau_d(x_new, z2))/2
if (new_score > score) {
score = new_score
x = x_new
}
}
permuations
permutations
seq(nrow(permutations))
for (i in seq(nrow(permutations))) {
x_new = permutations[i, ]
new_score = (rankr::tau_d(x_new, z1) + rankr::tau_d(x_new, z2))/2
if (new_score > score) {
score = new_score
x = x_new
}
}
x
score
plot(x, z1)
plot(x, z2)
k = 8
z1 = y1[1:k]
z2 = y2[1:k]
score = -Inf
x = 1:k
permutations = arrangements::permutations(x = 1:6, k = k, replace = TRUE)
for (i in seq(nrow(permutations))) {
x_new = permutations[i, ]
new_score = (rankr::tau_d(x_new, z1) + rankr::tau_d(x_new, z2))/2
if (new_score > score) {
score = new_score
x = x_new
}
}
score
x
y
x
plot(x, z1)
plot(x, z2)
y1 = 7 - psychTools::bfi$A1
y2 = psychTools::bfi$A2
y3 = psychTools::bfi$A3
y4 = psychTools::bfi$A4
y5 = psychTools::bfi$A5
y = cbind(y1, y2, y3, y4, y5)
cor(y, use = "complete.obs")
k = 8
z1 = y1[1:k]
z2 = y2[1:k]
plot(x, z2)
plot(x, z1)
rankr::tau_d(y1, y2)
rankr::tau_d(z1, z2)
rankr::tau_d(-z1, z2)
rankr::tau_d(z1, -z2)
rankr::tau_d(-z1, -z2)
rankr::tau_d(z2, -z1)
rankr::tau_d(z2, z1)
z1
cor(z1, z2)
rankr::tau_d(z1, -z2)
z1
z2
score = -Inf
x = 1:k
permutations = arrangements::permutations(x = 1:2, k = k, replace = TRUE)
permutations
z1 + z2
order(z1 + z2)
arrangements::permutations(x = 1:k)
score = -Inf
x = 1:k
#permutations = arrangements::permutations(x = 1:2, k = k, replace = TRUE)
permutations = arrangements::permutations(x = 1:k)
for (i in seq(nrow(permutations))) {
x_new = permutations[i, ]
new_score = (rankr::tau_d(x_new, z1) + rankr::tau_d(x_new, z2))/2
if (new_score > score) {
score = new_score
x = x_new
}
}
score
x_new
order(z1 + z2)
(rankr::tau_d(x_new, z1) + rankr::tau_d(x_new, z2))/2
x_new = order(z1 + z2)
(rankr::tau_d(x_new, z1) + rankr::tau_d(x_new, z2))/2
z1
cor(y1, y2)
cbind(z1, z2)
x_new
cbind(z1, z2, c(8,7,6,5,4,3,2,1))
permutations = arrangements::permutations(x = 1:k)
permutations
score = -Inf
x = 1:k
permutations = arrangements::permutations(x = 1:2, k = k, replace = TRUE)
#permutations = arrangements::permutations(x = 1:k)
for (i in seq(nrow(permutations))) {
x_new = permutations[i, ]
new_score = (rankr::tau_d(x_new, z1)^2 + rankr::tau_d(x_new, z2)^2)/2
if (new_score > score) {
score = new_score
x = x_new
}
}
x
score = -Inf
x = 1:k
#permutations = arrangements::permutations(x = 1:2, k = k, replace = TRUE)
permutations = arrangements::permutations(x = 1:k)
for (i in seq(nrow(permutations))) {
x_new = permutations[i, ]
new_score = (rankr::tau_d(x_new, z1)^2 + rankr::tau_d(x_new, z2)^2)/2
if (new_score > score) {
score = new_score
x = x_new
}
}
x
cbind(z1, z2, c(2,3,7,6,1,8,4,5))
(rankr::tau_d(x_new, z1)^2 + rankr::tau_d(x_new, z2)^2)/2
rankr::tau_d(x_new, z1)
rankr::tau_d(x_new, z2)
k = 8
z1 = y1[1:k]
z2 = y2[1:k]
score = -Inf
x = 1:k
#permutations = arrangements::permutations(x = 1:2, k = k, replace = TRUE)
permutations = arrangements::permutations(x = 1:k)
for (i in seq(nrow(permutations))) {
x_new = permutations[i, ]
new_score = (rankr::tau_d(x_new, z1) + rankr::tau_d(x_new, z2))/2
if (new_score > score) {
score = new_score
x = x_new
}
}
cbind(z1, z2, c(2,3,7,6,1,8,4,5))
(rankr::tau_d(x_new, z1)^2 + rankr::tau_d(x_new, z2)^2)/2
x_new
cbind(z1, z2, x_new)
plot(z1, x_new)
plot(z2, x_new)
permutations[1, ]
score = -Inf
x = 1:k
#permutations = arrangements::permutations(x = 1:2, k = k, replace = TRUE)
permutations = arrangements::permutations(x = 1:k)
for (i in seq(nrow(permutations))) {
x_new = permutations[i, ]
new_score = (rankr::tau_d(x_new, z1) + rankr::tau_d(x_new, z2))/2
new_score = rankr::tau_d(x_new, z1)
if (new_score > score) {
score = new_score
x = x_new
}
}
cbind(z1, z2, x_new)
rankr::tau_d(x_new, z1)
z1
z2 = z2[order(z1)]
z1 = sort(z1)
z1
z2
score = -Inf
x = 1:k
#permutations = arrangements::permutations(x = 1:2, k = k, replace = TRUE)
permutations = arrangements::permutations(x = 1:k)
for (i in seq(nrow(permutations))) {
x_new = permutations[i, ]
new_score = (rankr::tau_d(x_new, z1) + rankr::tau_d(x_new, z2))/2
new_score = rankr::tau_d(x_new, z1)
if (new_score > score) {
score = new_score
x = x_new
}
}
cbind(z1, z2, x_new)
z1
rankr::tau_d(x, z1)
rankr::tau_d(-x, z1)
rankr::tau_d(x, z1)
x
x_new
k = 8
z1 = y1[1:k]
z2 = y2[1:k]
z2 = z2[order(z1)]
z1 = sort(z1)
score = -Inf
x = 1:k
#permutations = arrangements::permutations(x = 1:2, k = k, replace = TRUE)
permutations = arrangements::permutations(x = 1:k)
for (i in seq(nrow(permutations))) {
x_new = permutations[i, ]
new_score = (rankr::tau_d(x_new, z1) + rankr::tau_d(x_new, z2))/2
new_score = rankr::tau_d(x_new, z1)
if (new_score > score) {
score = new_score
x = x_new
}
}
cbind(z1, z2, x)
cbind(z1, z2, x)
(rankr::tau_d(x, z1)^2 + rankr::tau_d(x, z2)^2)/2
score = -Inf
x = 1:k
#permutations = arrangements::permutations(x = 1:2, k = k, replace = TRUE)
permutations = arrangements::permutations(x = 1:k)
for (i in seq(nrow(permutations))) {
x_new = permutations[i, ]
new_score = (rankr::tau_d(x_new, z1) + rankr::tau_d(x_new, z2))/2
if (new_score > score) {
score = new_score
x = x_new
}
}
cbind(z1, z2, x)
(rankr::tau_d(x, z1)^2 + rankr::tau_d(x, z2)^2)/2
cbind(z1[order(x)], z2[order(x)])
k = 8
z1 = y3[1:k]
z2 = y4[1:k]
z2 = z2[order(z1)]
z1 = sort(z1)
score = -Inf
x = 1:k
#permutations = arrangements::permutations(x = 1:2, k = k, replace = TRUE)
permutations = arrangements::permutations(x = 1:k)
for (i in seq(nrow(permutations))) {
x_new = permutations[i, ]
new_score = (rankr::tau_d(x_new, z1) + rankr::tau_d(x_new, z2))/2
if (new_score > score) {
score = new_score
x = x_new
}
}
cbind(z1[order(x)], z2[order(x)])
k = 8
z1 = y1[1:k]
z2 = y2[1:k]
score = -Inf
x = 1:k
#permutations = arrangements::permutations(x = 1:2, k = k, replace = TRUE)
permutations = arrangements::permutations(x = 1:k)
for (i in seq(nrow(permutations))) {
x_new = permutations[i, ]
new_score = (rankr::tau_d(x_new, z1) + rankr::tau_d(x_new, z2))/2
if (new_score > score) {
score = new_score
x = x_new
}
}
cbind(z1[order(x)], z2[order(x)])
(rankr::tau_d(x, z1)^2 + rankr::tau_d(x, z2)^2)/2
x
cbind(z1, z2)
