d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
#DescTools::SomersDelta(x, y)
f = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
mean(ys[1, ] > ys[2, ]) - mean(ys[1, ] > ys[2, ] & xs[1, ] < xs[2, ])
mean(ys[1, ] > ys[2, ] & xs[1, ] >= xs[2, ])
}
g = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
u = mean(ys[1, ] > ys[2, ]) - mean(ys[1, ] > ys[2, ] & xs[1, ] < xs[2, ])
l = mean(ys[1, ] > ys[2, ]) * mean(xs[1, ] >= xs[2, ])
1 - u/l
}
# g(x,y)
# rankr::tau_d(x, y)
# rankr::tau_d(y, x)
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
DescTools::SomersDelta(x, y)
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
#ys = combn(y, 2)
#xs = combn(x, 2)
2 * rankr:::count_inversions(y) / (n * (n - 1))
mean((ys[2, ] < ys[1, ] & xs[2, ] > xs[1, ]) | (ys[1, ] < ys[2, ] & xs[1, ] > xs[2, ]))
sum(((ys[2, ] > ys[1, ]) & (xs[2, ] >= xs[1, ])) | ((ys[1, ] >= ys[2, ]) & (xs[1, ] >= xs[2, ])))
n * (n - 1) - sum((ys[1, ] < ys[2, ] & xs[1, ] < xs[2, ]) | (ys[1, ] > ys[2, ] & xs[1, ] > xs[2, ]))
rankr:::count_inversions(y)
rankr:::sum_prod_xy(x, y)
rankr:::sum_prod_x(y)
rankr:::count_inversions(y)
DescTools::ConDisPairs(table(x, y))$D
sum((ys[2, ] < ys[1, ] & xs[2, ] > xs[1, ]))
n = length(x)
(n * (n-1) - rankr:::sum_prod_x(x) - rankr:::sum_prod_x(y) + rankr:::sum_prod_xy(x, y) - 4*rankr:::count_inversions(y))/2
(DescTools::ConDisPairs(table(x, y))$C - DescTools::ConDisPairs(table(x, y))$D)
## Comparison.
set.seed(313)
n = 200
x = sort(sample(1:300, n, replace = TRUE))
x0 = 33
x1 = 66
f = function(x) 0 * (x < x0) + (x - x0) * (x >= x0 & x < x1) + (x1) * (x > x1)
#f = function(x) 0 * (x < x0) + x0 * (x >= x0 & x < x1) + x1 * (x > x1)
y = f(x) + rbinom(n, 1, 0.5)
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = mean(ys[1, ] > ys[2, ])
u = mean(ys[1, ] > ys[2, ] & xs[1, ] <= xs[2, ]) + mean(ys[1, ] <= ys[2, ] & xs[1, ] > xs[2, ])
1 - u / l
}
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = mean(ys[1, ] > ys[2, ])
u = mean(ys[1, ] > ys[2, ]) - 0.25*mean(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ]) - 2 * rankr:::count_inversions(y) / (n * (n - 1))
u / l
}
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
#DescTools::SomersDelta(x, y)
f = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
mean(ys[1, ] > ys[2, ]) - mean(ys[1, ] > ys[2, ] & xs[1, ] < xs[2, ])
mean(ys[1, ] > ys[2, ] & xs[1, ] >= xs[2, ])
}
g = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
u = mean(ys[1, ] > ys[2, ]) - mean(ys[1, ] > ys[2, ] & xs[1, ] < xs[2, ])
l = mean(ys[1, ] > ys[2, ]) * mean(xs[1, ] >= xs[2, ])
1 - u/l
}
# g(x,y)
# rankr::tau_d(x, y)
# rankr::tau_d(y, x)
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
DescTools::SomersDelta(x, y)
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
#ys = combn(y, 2)
#xs = combn(x, 2)
2 * rankr:::count_inversions(y) / (n * (n - 1))
mean((ys[2, ] < ys[1, ] & xs[2, ] > xs[1, ]) | (ys[1, ] < ys[2, ] & xs[1, ] > xs[2, ]))
sum(((ys[2, ] > ys[1, ]) & (xs[2, ] >= xs[1, ])) | ((ys[1, ] >= ys[2, ]) & (xs[1, ] >= xs[2, ])))
n * (n - 1) - sum((ys[1, ] < ys[2, ] & xs[1, ] < xs[2, ]) | (ys[1, ] > ys[2, ] & xs[1, ] > xs[2, ]))
rankr:::count_inversions(y)
rankr:::sum_prod_xy(x, y)
rankr:::sum_prod_x(y)
rankr:::count_inversions(y)
DescTools::ConDisPairs(table(x, y))$D
sum((ys[2, ] < ys[1, ] & xs[2, ] > xs[1, ]))
n = length(x)
(n * (n-1) - rankr:::sum_prod_x(x) - rankr:::sum_prod_x(y) + rankr:::sum_prod_xy(x, y) - 4*rankr:::inversions(y))/2
(DescTools::ConDisPairs(table(x, y))$C - DescTools::ConDisPairs(table(x, y))$D)
## Comparison.
set.seed(313)
n = 200
x = sort(sample(1:300, n, replace = TRUE))
x0 = 33
x1 = 66
f = function(x) 0 * (x < x0) + (x - x0) * (x >= x0 & x < x1) + (x1) * (x > x1)
#f = function(x) 0 * (x < x0) + x0 * (x >= x0 & x < x1) + x1 * (x > x1)
y = f(x) + rbinom(n, 1, 0.5)
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = mean(ys[1, ] > ys[2, ])
u = mean(ys[1, ] > ys[2, ] & xs[1, ] <= xs[2, ]) + mean(ys[1, ] <= ys[2, ] & xs[1, ] > xs[2, ])
1 - u / l
}
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = mean(ys[1, ] > ys[2, ])
u = mean(ys[1, ] > ys[2, ]) - 0.25*mean(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ]) - 2 * rankr:::count_inversions(y) / (n * (n - 1))
u / l
}
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
#DescTools::SomersDelta(x, y)
f = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
mean(ys[1, ] > ys[2, ]) - mean(ys[1, ] > ys[2, ] & xs[1, ] < xs[2, ])
mean(ys[1, ] > ys[2, ] & xs[1, ] >= xs[2, ])
}
g = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
u = mean(ys[1, ] > ys[2, ]) - mean(ys[1, ] > ys[2, ] & xs[1, ] < xs[2, ])
l = mean(ys[1, ] > ys[2, ]) * mean(xs[1, ] >= xs[2, ])
1 - u/l
}
# g(x,y)
# rankr::tau_d(x, y)
# rankr::tau_d(y, x)
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
DescTools::SomersDelta(x, y)
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
#ys = combn(y, 2)
#xs = combn(x, 2)
2 * rankr:::count_inversions(y) / (n * (n - 1))
mean((ys[2, ] < ys[1, ] & xs[2, ] > xs[1, ]) | (ys[1, ] < ys[2, ] & xs[1, ] > xs[2, ]))
sum(((ys[2, ] > ys[1, ]) & (xs[2, ] >= xs[1, ])) | ((ys[1, ] >= ys[2, ]) & (xs[1, ] >= xs[2, ])))
n * (n - 1) - sum((ys[1, ] < ys[2, ] & xs[1, ] < xs[2, ]) | (ys[1, ] > ys[2, ] & xs[1, ] > xs[2, ]))
rankr:::count_inversions(y)
rankr:::sum_prod_xy(x, y)
rankr:::sum_prod_x(y)
rankr:::count_inversions(y)
DescTools::ConDisPairs(table(x, y))$D
sum((ys[2, ] < ys[1, ] & xs[2, ] > xs[1, ]))
n = length(x)
(n * (n-1) - rankr:::sum_prod_x(x) - rankr:::sum_prod_x(y) + rankr:::sum_prod_xy(x, y) - 4*rankr:::inversions(x, y))/2
(DescTools::ConDisPairs(table(x, y))$C - DescTools::ConDisPairs(table(x, y))$D)
rankr:::inversions(x, y)
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = mean(ys[1, ] > ys[2, ])
u = mean(ys[1, ] > ys[2, ]) - 0.25*mean(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ]) - 2 * rankr:::inversions(x, y) / (n * (n - 1))
u / l
}
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = mean(ys[1, ] > ys[2, ])
u = mean(ys[1, ] > ys[2, ]) - 0.5*mean(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ]) - 2 * rankr:::inversions(x, y) / (n * (n - 1))
u / l
}
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = mean(ys[1, ] > ys[2, ])
u = mean(ys[1, ] > ys[2, ]) - 0.5*mean(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ]) - 4 * rankr:::inversions(x, y) / (n * (n - 1))
u / l
}
d(x, y)
d(y, x)
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = mean(ys[1, ] > ys[2, ])
u = mean(ys[1, ] > ys[2, ]) - 0.5*mean(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ]) - 4 * rankr:::inversions(x, y) / (n * (n - 1))
u / l
}
d(x, y)
d(y, x)
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = mean(ys[1, ] > ys[2, ])
u = mean(ys[1, ] > ys[2, ]) - 0.5*mean(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ]) - 4 * rankr:::inversions(x, y) / (n * (n - 1))
u / l
}
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
sum(ys[1, ] > ys[2, ])
(n * (n-1) - rankr:::sum_prod_x(y))/2
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
u = (n * (n-1) - rankr:::sum_prod_x(x) - rankr:::sum_prod_x(y) + rankr:::sum_prod_xy(x, y) - 4*rankr:::inversions(x, y))/2
u / l
}
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
u = sum(ys[1, ] > ys[2, ]) - 0.5*sum(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ]) - 4 * rankr:::inversions(x, y)
u / l
}
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
0.5*sum(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ])
sum(ys[1, ] > ys[2, ])
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
u = sum(ys[1, ] > ys[2, ]) - 0.5*sum(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ]) - 2 * rankr:::inversions(x, y)
u / l
}
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
0.5*sum(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ])
sum(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ])
sum(ys[1, ] > ys[2, ]) - 2 * rankr:::inversions(x, y)
(n * (n-1) - rankr:::sum_prod_x(x) - rankr:::sum_prod_x(y) + rankr:::sum_prod_xy(x, y) - 4*rankr:::inversions(x, y))/2
+ rankr:::sum_prod_xy(x, y)
rankr:::sum_prod_x(x)
sum(ys[1, ] > ys[2, ]) + rankr:::sum_prod_xy(x, y)/2 - rankr:::sum_prod_x(x)- 2 * rankr:::inversions(x, y)
sum(ys[1, ] > ys[2, ])
n * (n-1) - rankr:::sum_prod_x(x)
n * (n-1) - rankr:::sum_prod_x(y)
n * (n-1) - rankr:::sum_prod_x(ysum(ys[1, ] > ys[2, ]) + rankr:::sum_prod_xy(x, y) - rankr:::sum_prod_x(x)- 4 * rankr:::inversions(x, y))
sum(ys[1, ] > ys[2, ]) + rankr:::sum_prod_xy(x, y) - rankr:::sum_prod_x(x)- 4 * rankr:::inversions(x, y)
sum(ys[1, ] > ys[2, ])
rankr:::inversions(x, y)
sum(ys[1, ] > ys[2, ]) + rankr:::sum_prod_xy(x, y) - rankr:::sum_prod_x(x)- 2 * rankr:::inversions(x, y)
sum(ys[1, ] > ys[2, ])
n * (n-1) - rankr:::sum_prod_x(y)
(sum(ys[1, ] > ys[2, ]) + rankr:::sum_prod_xy(x, y) - rankr:::sum_prod_x(x)- 4 * rankr:::inversions(x, y))/2
sum(ys[1, ] > ys[2, ]) + rankr:::sum_prod_xy(x, y)/2 - rankr:::sum_prod_x(x)/2 - 2 * rankr:::inversions(x, y))
sum(ys[1, ] > ys[2, ]) + rankr:::sum_prod_xy(x, y)/2 - rankr:::sum_prod_x(x)/2 - 2 * rankr:::inversions(x, y)
(n * (n-1) - rankr:::sum_prod_x(x) - rankr:::sum_prod_x(y) + rankr:::sum_prod_xy(x, y) - 4*rankr:::inversions(x, y))/2
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
u = sum(ys[1, ] > ys[2, ]) + rankr:::sum_prod_xy(x, y)/2 - rankr:::sum_prod_x(x)/2 - 2 * rankr:::inversions(x, y)
u / l
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
u = sum(ys[1, ] > ys[2, ]) + rankr:::sum_prod_xy(x, y)/2 - rankr:::sum_prod_x(x)/2 - 2 * rankr:::inversions(x, y)
u / l
}
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
rankr:::sum_prod_xy(x, y)/2 - rankr:::sum_prod_x(x)/2
0.5*sum(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ])
sum(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ])
sum(ys[1, ] > ys[2, ]) + rankr:::sum_prod_xy(x, y)/2 - rankr:::sum_prod_x(x)/2 - 2 * rankr:::inversions(x, y)
sum(ys[1, ] > ys[2, ]) - sum(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ]) - 2 * rankr:::inversions(x, y)
sum(ys[1, ] > ys[2, ], xs[1, ] > xs[2, ])
sum(ys[1, ] > ys[2, ], xs[1, ] > xs[2, ]) / 4
sum(ys[1, ] > ys[2, ] & xs[1, ] > xs[2, ])
sum(ys[1, ] > ys[2, ] & xs[1, ] > xs[2, ]) / 2
sum(ys[1, ] > ys[2, ] & xs[1, ] >= xs[2, ])
ys[1, ] > ys[2, ] & xs[1, ] >= xs[2, ]
sum(ys[1, ] > ys[2, ] & xs[1, ] >= xs[2, ])
sum(ys[1, ] > ys[2, ]) - sum(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ]) - 2 * rankr:::inversions(x, y)
sum(ys[1, ] >= ys[2, ] & xs[1, ] >= xs[2, ])
sum(ys[1, ] >= ys[2, ] & xs[1, ] > xs[2, ])
sum(ys[1, ] > ys[2, ] & xs[1, ] > xs[2, ])
sum((ys[2, ] < ys[1, ] & xs[2, ] > xs[1, ]))
rankr:::count_inversions(y)
rankr:::sum_prod_xy(x, y)
rankr:::sum_prod_x(y)
rankr:::count_inversions(y)
DescTools::ConDisPairs(table(x, y))$D
sum((ys[2, ] < ys[1, ] & xs[2, ] > xs[1, ]))
sum(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ]) == rankr:::sum_prod_xy(x, y)/2 - rankr:::sum_prod_x(x)/2
rankr:::sum_prod_xy(x, y)/2 - rankr:::sum_prod_x(x)/2
sum(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ])
sum(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ]) == - rankr:::sum_prod_xy(x, y)/2 + rankr:::sum_prod_x(x)/2
2 * rankr:::inversions(x, y) == sum((ys[2, ] < ys[1, ] & xs[2, ] > xs[1, ]))
2 * rankr:::inversions(x, y)
sum((ys[2, ] < ys[1, ] & xs[2, ] > xs[1, ]))
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
u = sum(ys[1, ] > ys[2, ]) + rankr:::sum_prod_xy(x, y)/2 - rankr:::sum_prod_x(x)/2 - 2 * rankr:::inversions(x, y)
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
u = sum(ys[1, ] > ys[2, ]) + rankr:::sum_prod_xy(x, y)/2 - rankr:::sum_prod_x(x)/2 - 2 * rankr:::inversions(x, y)
u / l
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
u = l - 3 * sum(ys[1, ] > ys[2, ], xs[1, ] < xs[2, ])
u / l
}
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
u = l - 2 * sum(ys[1, ] > ys[2, ], xs[1, ] < xs[2, ])
u / l
}
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
u = 2 * sum(ys[1, ] > ys[2, ], xs[1, ] < xs[2, ]) + sum(ys[1, ] > ys[2, ], xs[1, ] == xs[2, ])
1 - u / l
}
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
# = 2 * sum(ys[1, ] > ys[2, ], xs[1, ] < xs[2, ]) + sum(ys[1, ] > ys[2, ], xs[1, ] == xs[2, ])
#1 - u / l
u = sum(ys[1, ] > ys[2, ], xs[1, ] > xs[2, ]) - sum(ys[1, ] > ys[2, ], xs[1, ] < xs[2, ])
}
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
# = 2 * sum(ys[1, ] > ys[2, ], xs[1, ] < xs[2, ]) + sum(ys[1, ] > ys[2, ], xs[1, ] == xs[2, ])
#1 - u / l
u = sum(ys[1, ] > ys[2, ], xs[1, ] > xs[2, ]) - sum(ys[1, ] > ys[2, ], xs[1, ] < xs[2, ])
u / l
}
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
sum(ys[1, ] > ys[2, ], xs[1, ] > xs[2, ]) - sum(ys[1, ] > ys[2, ], xs[1, ] < xs[2, ])
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
# = 2 * sum(ys[1, ] > ys[2, ], xs[1, ] < xs[2, ]) + sum(ys[1, ] > ys[2, ], xs[1, ] == xs[2, ])
#1 - u / l
u = sum(ys[1, ] > ys[2, ] & xs[1, ] > xs[2, ]) - sum(ys[1, ] > ys[2, ] & xs[1, ] < xs[2, ])
u / l
}
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
#DescTools::SomersDelta(x, y)
d = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
u = 2 * sum(ys[1, ] > ys[2, ] & xs[1, ] < xs[2, ]) + sum(ys[1, ] > ys[2, ] & xs[1, ] == xs[2, ])
1 - u / l
#u = sum(ys[1, ] > ys[2, ] & xs[1, ] > xs[2, ]) - sum(ys[1, ] > ys[2, ] & xs[1, ] < xs[2, ])
#u / l
}
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
f = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
u = sum(ys[1, ] < ys[2, ] & xs[1, ] >= xs[2, ]) + sum(ys[1, ] >= ys[2, ], xs[1, ] < xs[2, ])
1 - u / l
}
f = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
u = sum(ys[1, ] < ys[2, ] & xs[1, ] >= xs[2, ]) + sum(ys[1, ] >= ys[2, ], xs[1, ] < xs[2, ])
1 - u / l
}
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
f(x, y)
f(y, x)
#DescTools::SomersDelta(x, y)
f = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
u = sum(ys[1, ] < ys[2, ] & xs[1, ] >= xs[2, ]) + sum(ys[1, ] >= ys[2, ] & xs[1, ] < xs[2, ])
1 - u / l
}
d(x, y)
d(y, x)
rankr::somers_d(x, y)
rankr::somers_d(y, x)
f(x, y)
f(y, x)
#DescTools::SomersDelta(x, y)
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
u = sum(ys[1, ] <= ys[2, ] & xs[1, ] > xs[2, ]) + sum(ys[1, ] > ys[2, ] & xs[1, ] <= xs[2, ])
1 - u / l
f = function(x, y) {
ys = cbind(combn(y, 2), combn(rev(y), 2))
xs = cbind(combn(x, 2), combn(rev(x), 2))
l = sum(ys[1, ] > ys[2, ])
u = sum(ys[1, ] <= ys[2, ] & xs[1, ] > xs[2, ]) + sum(ys[1, ] > ys[2, ] & xs[1, ] <= xs[2, ])
1 - u / l
}
sum(ys[1, ] > ys[2, ] & xs[1, ] >= xs[2, ]) + sum(ys[1, ] <= ys[2, ] & xs[1, ] < xs[2, ])
sum(ys[1, ] < ys[2, ] & xs[1, ] >= xs[2, ]) + sum(ys[1, ] >= ys[2, ] & xs[1, ] < xs[2, ])
sum(ys[1, ] > ys[2, ] & xs[1, ] >= xs[2, ]) + sum(ys[1, ] <= ys[2, ] & xs[1, ] < xs[2, ])
sum(ys[1, ] > ys[2, ] & xs[1, ] >= xs[2, ]) + sum(ys[1, ] <= ys[2, ] & xs[1, ] < xs[2, ])
sum(ys[1, ] < ys[2, ] & xs[1, ] >= xs[2, ]) + sum(ys[1, ] >= ys[2, ] & xs[1, ] < xs[2, ])
sum(ys[1, ] > ys[2, ])
sum(ys[1, ] > ys[2, ])
n * (n - 1)
sum(ys[1, ] > ys[2, ] & xs[1, ] >= xs[2, ]) + sum(ys[1, ] <= ys[2, ] & xs[1, ] < xs[2, ])
n * (n - 1) - sum(ys[1, ] > ys[2, ] & xs[1, ] >= xs[2, ]) + sum(ys[1, ] <= ys[2, ] & xs[1, ] < xs[2, ])
sum(ys[1, ] > ys[2, ] & xs[1, ] >= xs[2, ]) + sum(ys[1, ] <= ys[2, ] & xs[1, ] < xs[2, ])
n * (n - 1) - sum(ys[1, ] > ys[2, ] & xs[1, ] >= xs[2, ]) - sum(ys[1, ] <= ys[2, ] & xs[1, ] < xs[2, ])
sum(ys[1, ] <= ys[2, ] & xs[1, ] > xs[2, ]) + sum(ys[1, ] > ys[2, ] & xs[1, ] <= xs[2, ])
sum(ys[1, ] <= ys[2, ] & xs[1, ] > xs[2, ]) + sum(ys[1, ] > ys[2, ] & xs[1, ] <= xs[2, ])
sum(ys[1, ] > ys[2, ] & xs[1, ] >= xs[2, ]) + sum(ys[1, ] <= ys[2, ] & xs[1, ] < xs[2, ])
sum(ys[1, ] < ys[2, ] & xs[1, ] >= xs[2, ]) + sum(ys[1, ] >= ys[2, ] & xs[1, ] < xs[2, ])
sum(ys[1, ] > ys[2, ] & xs[1, ] >= xs[2, ]) + sum(ys[1, ] <= ys[2, ] & xs[1, ] < xs[2, ])
sum(ys[1, ] <= ys[2, ] & xs[1, ] >= xs[2, ]) + sum(ys[1, ] > ys[2, ] & xs[1, ] < xs[2, ])
sum(ys[1, ] <= ys[2, ] & xs[1, ] >= xs[2, ]) + sum(ys[1, ] > ys[2, ] & xs[1, ] < xs[2, ])
sum(ys[1, ] <= ys[2, ] & xs[1, ] <= xs[2, ]) + sum(ys[1, ] > ys[2, ] & xs[1, ] < xs[2, ])
sum(ys[1, ] < ys[2, ] & xs[1, ] >= xs[2, ]) + sum(ys[1, ] >= ys[2, ] & xs[1, ] < xs[2, ])
sum(ys[1, ] > ys[2, ] & xs[1, ] >= xs[2, ]) + sum(ys[1, ] <= ys[2, ] & xs[1, ] < xs[2, ])
rankr::somers_d(x, y)
rankr::tau_a(x, y)
rankr::tau_a(y, x)
rankr::somers_d(y, x)
u = 2 * sum(ys[1, ] > ys[2, ] & xs[1, ] < xs[2, ])
1 - u / l
DescTools::KendallTauA(x, y)
u = sum(ys[1, ] > ys[2, ] & xs[1, ] < xs[2, ])
1 - u / l
u = 3 * sum(ys[1, ] > ys[2, ] & xs[1, ] < xs[2, ])
1 - u / l
sum(ys[1, ] > ys[2, ])
mean(ys[1, ] > ys[2, ])
2/mean(ys[1, ] > ys[2, ])
2/mean(ys[1, ] > ys[2, ]) * rankr::tau_a(x, y)
0.5/mean(ys[1, ] > ys[2, ]) * rankr::tau_a(x, y)
rankr::somers_d(x, y)
